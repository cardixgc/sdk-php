<?php
/**
 * OrderCheckoutRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Cardix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OrderCheckoutRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderCheckoutRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderCheckoutRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer_name' => 'string',
        'customer_document_number' => 'string',
        'customer_mobile_phone_country_code' => 'string',
        'customer_mobile_phone_area_code' => 'string',
        'customer_mobile_phone_number' => 'string',
        'customer_birth_date' => '\DateTime',
        'customer_gender' => 'string',
        'customer_email' => 'string',
        'customer_ip_address' => 'string',
        'billing_address_line1' => 'string',
        'billing_address_line2' => 'string',
        'billing_address_number' => 'string',
        'billing_address_zip_code' => 'string',
        'billing_address_city' => 'string',
        'billing_address_state' => 'string',
        'billing_address_neighborhood' => 'string',
        'billing_address_country' => 'string',
        'card_hash' => 'string',
        'card_holder_name' => 'string',
        'card_expiration_date' => 'string',
        'card_expiration_year' => 'string',
        'card_expiration_month' => 'string',
        'card_number' => 'string',
        'card_cvv' => 'string',
        'installments' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer_name' => null,
        'customer_document_number' => null,
        'customer_mobile_phone_country_code' => null,
        'customer_mobile_phone_area_code' => null,
        'customer_mobile_phone_number' => null,
        'customer_birth_date' => 'date-time',
        'customer_gender' => null,
        'customer_email' => null,
        'customer_ip_address' => null,
        'billing_address_line1' => null,
        'billing_address_line2' => null,
        'billing_address_number' => null,
        'billing_address_zip_code' => null,
        'billing_address_city' => null,
        'billing_address_state' => null,
        'billing_address_neighborhood' => null,
        'billing_address_country' => null,
        'card_hash' => null,
        'card_holder_name' => null,
        'card_expiration_date' => null,
        'card_expiration_year' => null,
        'card_expiration_month' => null,
        'card_number' => null,
        'card_cvv' => null,
        'installments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'customer_name' => true,
		'customer_document_number' => true,
		'customer_mobile_phone_country_code' => true,
		'customer_mobile_phone_area_code' => true,
		'customer_mobile_phone_number' => true,
		'customer_birth_date' => true,
		'customer_gender' => true,
		'customer_email' => true,
		'customer_ip_address' => true,
		'billing_address_line1' => true,
		'billing_address_line2' => true,
		'billing_address_number' => true,
		'billing_address_zip_code' => true,
		'billing_address_city' => true,
		'billing_address_state' => true,
		'billing_address_neighborhood' => true,
		'billing_address_country' => true,
		'card_hash' => true,
		'card_holder_name' => true,
		'card_expiration_date' => true,
		'card_expiration_year' => true,
		'card_expiration_month' => true,
		'card_number' => true,
		'card_cvv' => true,
		'installments' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_name' => 'customerName',
        'customer_document_number' => 'customerDocumentNumber',
        'customer_mobile_phone_country_code' => 'customerMobilePhoneCountryCode',
        'customer_mobile_phone_area_code' => 'customerMobilePhoneAreaCode',
        'customer_mobile_phone_number' => 'customerMobilePhoneNumber',
        'customer_birth_date' => 'customerBirthDate',
        'customer_gender' => 'customerGender',
        'customer_email' => 'customerEmail',
        'customer_ip_address' => 'customerIpAddress',
        'billing_address_line1' => 'billingAddressLine1',
        'billing_address_line2' => 'billingAddressLine2',
        'billing_address_number' => 'billingAddressNumber',
        'billing_address_zip_code' => 'billingAddressZipCode',
        'billing_address_city' => 'billingAddressCity',
        'billing_address_state' => 'billingAddressState',
        'billing_address_neighborhood' => 'billingAddressNeighborhood',
        'billing_address_country' => 'billingAddressCountry',
        'card_hash' => 'cardHash',
        'card_holder_name' => 'cardHolderName',
        'card_expiration_date' => 'cardExpirationDate',
        'card_expiration_year' => 'cardExpirationYear',
        'card_expiration_month' => 'cardExpirationMonth',
        'card_number' => 'cardNumber',
        'card_cvv' => 'cardCVV',
        'installments' => 'installments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_name' => 'setCustomerName',
        'customer_document_number' => 'setCustomerDocumentNumber',
        'customer_mobile_phone_country_code' => 'setCustomerMobilePhoneCountryCode',
        'customer_mobile_phone_area_code' => 'setCustomerMobilePhoneAreaCode',
        'customer_mobile_phone_number' => 'setCustomerMobilePhoneNumber',
        'customer_birth_date' => 'setCustomerBirthDate',
        'customer_gender' => 'setCustomerGender',
        'customer_email' => 'setCustomerEmail',
        'customer_ip_address' => 'setCustomerIpAddress',
        'billing_address_line1' => 'setBillingAddressLine1',
        'billing_address_line2' => 'setBillingAddressLine2',
        'billing_address_number' => 'setBillingAddressNumber',
        'billing_address_zip_code' => 'setBillingAddressZipCode',
        'billing_address_city' => 'setBillingAddressCity',
        'billing_address_state' => 'setBillingAddressState',
        'billing_address_neighborhood' => 'setBillingAddressNeighborhood',
        'billing_address_country' => 'setBillingAddressCountry',
        'card_hash' => 'setCardHash',
        'card_holder_name' => 'setCardHolderName',
        'card_expiration_date' => 'setCardExpirationDate',
        'card_expiration_year' => 'setCardExpirationYear',
        'card_expiration_month' => 'setCardExpirationMonth',
        'card_number' => 'setCardNumber',
        'card_cvv' => 'setCardCvv',
        'installments' => 'setInstallments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_name' => 'getCustomerName',
        'customer_document_number' => 'getCustomerDocumentNumber',
        'customer_mobile_phone_country_code' => 'getCustomerMobilePhoneCountryCode',
        'customer_mobile_phone_area_code' => 'getCustomerMobilePhoneAreaCode',
        'customer_mobile_phone_number' => 'getCustomerMobilePhoneNumber',
        'customer_birth_date' => 'getCustomerBirthDate',
        'customer_gender' => 'getCustomerGender',
        'customer_email' => 'getCustomerEmail',
        'customer_ip_address' => 'getCustomerIpAddress',
        'billing_address_line1' => 'getBillingAddressLine1',
        'billing_address_line2' => 'getBillingAddressLine2',
        'billing_address_number' => 'getBillingAddressNumber',
        'billing_address_zip_code' => 'getBillingAddressZipCode',
        'billing_address_city' => 'getBillingAddressCity',
        'billing_address_state' => 'getBillingAddressState',
        'billing_address_neighborhood' => 'getBillingAddressNeighborhood',
        'billing_address_country' => 'getBillingAddressCountry',
        'card_hash' => 'getCardHash',
        'card_holder_name' => 'getCardHolderName',
        'card_expiration_date' => 'getCardExpirationDate',
        'card_expiration_year' => 'getCardExpirationYear',
        'card_expiration_month' => 'getCardExpirationMonth',
        'card_number' => 'getCardNumber',
        'card_cvv' => 'getCardCvv',
        'installments' => 'getInstallments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('customer_name', $data ?? [], null);
        $this->setIfExists('customer_document_number', $data ?? [], null);
        $this->setIfExists('customer_mobile_phone_country_code', $data ?? [], null);
        $this->setIfExists('customer_mobile_phone_area_code', $data ?? [], null);
        $this->setIfExists('customer_mobile_phone_number', $data ?? [], null);
        $this->setIfExists('customer_birth_date', $data ?? [], null);
        $this->setIfExists('customer_gender', $data ?? [], null);
        $this->setIfExists('customer_email', $data ?? [], null);
        $this->setIfExists('customer_ip_address', $data ?? [], null);
        $this->setIfExists('billing_address_line1', $data ?? [], null);
        $this->setIfExists('billing_address_line2', $data ?? [], null);
        $this->setIfExists('billing_address_number', $data ?? [], null);
        $this->setIfExists('billing_address_zip_code', $data ?? [], null);
        $this->setIfExists('billing_address_city', $data ?? [], null);
        $this->setIfExists('billing_address_state', $data ?? [], null);
        $this->setIfExists('billing_address_neighborhood', $data ?? [], null);
        $this->setIfExists('billing_address_country', $data ?? [], null);
        $this->setIfExists('card_hash', $data ?? [], null);
        $this->setIfExists('card_holder_name', $data ?? [], null);
        $this->setIfExists('card_expiration_date', $data ?? [], null);
        $this->setIfExists('card_expiration_year', $data ?? [], null);
        $this->setIfExists('card_expiration_month', $data ?? [], null);
        $this->setIfExists('card_number', $data ?? [], null);
        $this->setIfExists('card_cvv', $data ?? [], null);
        $this->setIfExists('installments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_name
     *
     * @return string|null
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string|null $customer_name customer_name
     *
     * @return self
     */
    public function setCustomerName($customer_name)
    {
        if (is_null($customer_name)) {
            array_push($this->openAPINullablesSetToNull, 'customer_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets customer_document_number
     *
     * @return string|null
     */
    public function getCustomerDocumentNumber()
    {
        return $this->container['customer_document_number'];
    }

    /**
     * Sets customer_document_number
     *
     * @param string|null $customer_document_number customer_document_number
     *
     * @return self
     */
    public function setCustomerDocumentNumber($customer_document_number)
    {
        if (is_null($customer_document_number)) {
            array_push($this->openAPINullablesSetToNull, 'customer_document_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_document_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_document_number'] = $customer_document_number;

        return $this;
    }

    /**
     * Gets customer_mobile_phone_country_code
     *
     * @return string|null
     */
    public function getCustomerMobilePhoneCountryCode()
    {
        return $this->container['customer_mobile_phone_country_code'];
    }

    /**
     * Sets customer_mobile_phone_country_code
     *
     * @param string|null $customer_mobile_phone_country_code customer_mobile_phone_country_code
     *
     * @return self
     */
    public function setCustomerMobilePhoneCountryCode($customer_mobile_phone_country_code)
    {
        if (is_null($customer_mobile_phone_country_code)) {
            array_push($this->openAPINullablesSetToNull, 'customer_mobile_phone_country_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_mobile_phone_country_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_mobile_phone_country_code'] = $customer_mobile_phone_country_code;

        return $this;
    }

    /**
     * Gets customer_mobile_phone_area_code
     *
     * @return string|null
     */
    public function getCustomerMobilePhoneAreaCode()
    {
        return $this->container['customer_mobile_phone_area_code'];
    }

    /**
     * Sets customer_mobile_phone_area_code
     *
     * @param string|null $customer_mobile_phone_area_code customer_mobile_phone_area_code
     *
     * @return self
     */
    public function setCustomerMobilePhoneAreaCode($customer_mobile_phone_area_code)
    {
        if (is_null($customer_mobile_phone_area_code)) {
            array_push($this->openAPINullablesSetToNull, 'customer_mobile_phone_area_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_mobile_phone_area_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_mobile_phone_area_code'] = $customer_mobile_phone_area_code;

        return $this;
    }

    /**
     * Gets customer_mobile_phone_number
     *
     * @return string|null
     */
    public function getCustomerMobilePhoneNumber()
    {
        return $this->container['customer_mobile_phone_number'];
    }

    /**
     * Sets customer_mobile_phone_number
     *
     * @param string|null $customer_mobile_phone_number customer_mobile_phone_number
     *
     * @return self
     */
    public function setCustomerMobilePhoneNumber($customer_mobile_phone_number)
    {
        if (is_null($customer_mobile_phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'customer_mobile_phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_mobile_phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_mobile_phone_number'] = $customer_mobile_phone_number;

        return $this;
    }

    /**
     * Gets customer_birth_date
     *
     * @return \DateTime|null
     */
    public function getCustomerBirthDate()
    {
        return $this->container['customer_birth_date'];
    }

    /**
     * Sets customer_birth_date
     *
     * @param \DateTime|null $customer_birth_date customer_birth_date
     *
     * @return self
     */
    public function setCustomerBirthDate($customer_birth_date)
    {
        if (is_null($customer_birth_date)) {
            array_push($this->openAPINullablesSetToNull, 'customer_birth_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_birth_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_birth_date'] = $customer_birth_date;

        return $this;
    }

    /**
     * Gets customer_gender
     *
     * @return string|null
     */
    public function getCustomerGender()
    {
        return $this->container['customer_gender'];
    }

    /**
     * Sets customer_gender
     *
     * @param string|null $customer_gender customer_gender
     *
     * @return self
     */
    public function setCustomerGender($customer_gender)
    {
        if (is_null($customer_gender)) {
            array_push($this->openAPINullablesSetToNull, 'customer_gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_gender', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_gender'] = $customer_gender;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string|null
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string|null $customer_email customer_email
     *
     * @return self
     */
    public function setCustomerEmail($customer_email)
    {
        if (is_null($customer_email)) {
            array_push($this->openAPINullablesSetToNull, 'customer_email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets customer_ip_address
     *
     * @return string|null
     */
    public function getCustomerIpAddress()
    {
        return $this->container['customer_ip_address'];
    }

    /**
     * Sets customer_ip_address
     *
     * @param string|null $customer_ip_address customer_ip_address
     *
     * @return self
     */
    public function setCustomerIpAddress($customer_ip_address)
    {
        if (is_null($customer_ip_address)) {
            array_push($this->openAPINullablesSetToNull, 'customer_ip_address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_ip_address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_ip_address'] = $customer_ip_address;

        return $this;
    }

    /**
     * Gets billing_address_line1
     *
     * @return string|null
     */
    public function getBillingAddressLine1()
    {
        return $this->container['billing_address_line1'];
    }

    /**
     * Sets billing_address_line1
     *
     * @param string|null $billing_address_line1 billing_address_line1
     *
     * @return self
     */
    public function setBillingAddressLine1($billing_address_line1)
    {
        if (is_null($billing_address_line1)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address_line1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address_line1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address_line1'] = $billing_address_line1;

        return $this;
    }

    /**
     * Gets billing_address_line2
     *
     * @return string|null
     */
    public function getBillingAddressLine2()
    {
        return $this->container['billing_address_line2'];
    }

    /**
     * Sets billing_address_line2
     *
     * @param string|null $billing_address_line2 billing_address_line2
     *
     * @return self
     */
    public function setBillingAddressLine2($billing_address_line2)
    {
        if (is_null($billing_address_line2)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address_line2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address_line2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address_line2'] = $billing_address_line2;

        return $this;
    }

    /**
     * Gets billing_address_number
     *
     * @return string|null
     */
    public function getBillingAddressNumber()
    {
        return $this->container['billing_address_number'];
    }

    /**
     * Sets billing_address_number
     *
     * @param string|null $billing_address_number billing_address_number
     *
     * @return self
     */
    public function setBillingAddressNumber($billing_address_number)
    {
        if (is_null($billing_address_number)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address_number'] = $billing_address_number;

        return $this;
    }

    /**
     * Gets billing_address_zip_code
     *
     * @return string|null
     */
    public function getBillingAddressZipCode()
    {
        return $this->container['billing_address_zip_code'];
    }

    /**
     * Sets billing_address_zip_code
     *
     * @param string|null $billing_address_zip_code billing_address_zip_code
     *
     * @return self
     */
    public function setBillingAddressZipCode($billing_address_zip_code)
    {
        if (is_null($billing_address_zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address_zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address_zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address_zip_code'] = $billing_address_zip_code;

        return $this;
    }

    /**
     * Gets billing_address_city
     *
     * @return string|null
     */
    public function getBillingAddressCity()
    {
        return $this->container['billing_address_city'];
    }

    /**
     * Sets billing_address_city
     *
     * @param string|null $billing_address_city billing_address_city
     *
     * @return self
     */
    public function setBillingAddressCity($billing_address_city)
    {
        if (is_null($billing_address_city)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address_city'] = $billing_address_city;

        return $this;
    }

    /**
     * Gets billing_address_state
     *
     * @return string|null
     */
    public function getBillingAddressState()
    {
        return $this->container['billing_address_state'];
    }

    /**
     * Sets billing_address_state
     *
     * @param string|null $billing_address_state billing_address_state
     *
     * @return self
     */
    public function setBillingAddressState($billing_address_state)
    {
        if (is_null($billing_address_state)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address_state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address_state', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address_state'] = $billing_address_state;

        return $this;
    }

    /**
     * Gets billing_address_neighborhood
     *
     * @return string|null
     */
    public function getBillingAddressNeighborhood()
    {
        return $this->container['billing_address_neighborhood'];
    }

    /**
     * Sets billing_address_neighborhood
     *
     * @param string|null $billing_address_neighborhood billing_address_neighborhood
     *
     * @return self
     */
    public function setBillingAddressNeighborhood($billing_address_neighborhood)
    {
        if (is_null($billing_address_neighborhood)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address_neighborhood');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address_neighborhood', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address_neighborhood'] = $billing_address_neighborhood;

        return $this;
    }

    /**
     * Gets billing_address_country
     *
     * @return string|null
     */
    public function getBillingAddressCountry()
    {
        return $this->container['billing_address_country'];
    }

    /**
     * Sets billing_address_country
     *
     * @param string|null $billing_address_country billing_address_country
     *
     * @return self
     */
    public function setBillingAddressCountry($billing_address_country)
    {
        if (is_null($billing_address_country)) {
            array_push($this->openAPINullablesSetToNull, 'billing_address_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('billing_address_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['billing_address_country'] = $billing_address_country;

        return $this;
    }

    /**
     * Gets card_hash
     *
     * @return string|null
     */
    public function getCardHash()
    {
        return $this->container['card_hash'];
    }

    /**
     * Sets card_hash
     *
     * @param string|null $card_hash card_hash
     *
     * @return self
     */
    public function setCardHash($card_hash)
    {
        if (is_null($card_hash)) {
            array_push($this->openAPINullablesSetToNull, 'card_hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_hash'] = $card_hash;

        return $this;
    }

    /**
     * Gets card_holder_name
     *
     * @return string|null
     */
    public function getCardHolderName()
    {
        return $this->container['card_holder_name'];
    }

    /**
     * Sets card_holder_name
     *
     * @param string|null $card_holder_name card_holder_name
     *
     * @return self
     */
    public function setCardHolderName($card_holder_name)
    {
        if (is_null($card_holder_name)) {
            array_push($this->openAPINullablesSetToNull, 'card_holder_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_holder_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_holder_name'] = $card_holder_name;

        return $this;
    }

    /**
     * Gets card_expiration_date
     *
     * @return string|null
     */
    public function getCardExpirationDate()
    {
        return $this->container['card_expiration_date'];
    }

    /**
     * Sets card_expiration_date
     *
     * @param string|null $card_expiration_date card_expiration_date
     *
     * @return self
     */
    public function setCardExpirationDate($card_expiration_date)
    {
        if (is_null($card_expiration_date)) {
            array_push($this->openAPINullablesSetToNull, 'card_expiration_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_expiration_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_expiration_date'] = $card_expiration_date;

        return $this;
    }

    /**
     * Gets card_expiration_year
     *
     * @return string|null
     */
    public function getCardExpirationYear()
    {
        return $this->container['card_expiration_year'];
    }

    /**
     * Sets card_expiration_year
     *
     * @param string|null $card_expiration_year card_expiration_year
     *
     * @return self
     */
    public function setCardExpirationYear($card_expiration_year)
    {
        if (is_null($card_expiration_year)) {
            array_push($this->openAPINullablesSetToNull, 'card_expiration_year');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_expiration_year', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_expiration_year'] = $card_expiration_year;

        return $this;
    }

    /**
     * Gets card_expiration_month
     *
     * @return string|null
     */
    public function getCardExpirationMonth()
    {
        return $this->container['card_expiration_month'];
    }

    /**
     * Sets card_expiration_month
     *
     * @param string|null $card_expiration_month card_expiration_month
     *
     * @return self
     */
    public function setCardExpirationMonth($card_expiration_month)
    {
        if (is_null($card_expiration_month)) {
            array_push($this->openAPINullablesSetToNull, 'card_expiration_month');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_expiration_month', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_expiration_month'] = $card_expiration_month;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string|null
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string|null $card_number card_number
     *
     * @return self
     */
    public function setCardNumber($card_number)
    {
        if (is_null($card_number)) {
            array_push($this->openAPINullablesSetToNull, 'card_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets card_cvv
     *
     * @return string|null
     */
    public function getCardCvv()
    {
        return $this->container['card_cvv'];
    }

    /**
     * Sets card_cvv
     *
     * @param string|null $card_cvv card_cvv
     *
     * @return self
     */
    public function setCardCvv($card_cvv)
    {
        if (is_null($card_cvv)) {
            array_push($this->openAPINullablesSetToNull, 'card_cvv');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('card_cvv', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['card_cvv'] = $card_cvv;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return int|null
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param int|null $installments installments
     *
     * @return self
     */
    public function setInstallments($installments)
    {
        if (is_null($installments)) {
            array_push($this->openAPINullablesSetToNull, 'installments');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('installments', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['installments'] = $installments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


